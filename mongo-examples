use blog_db


========= inserção de dados =========
db.posts.insert( {title: 'Welcome', content: 'This is my first post!', tags: [], postDate: new Date('1997-02-11')});
db.posts.insert( {title: 'Post 1', content: 'my text', tags: [], postDate: new Date('2011-09-22')});
db.posts.insert( {title: 'Post 2', content: 'I\'m trying to write something funny', tags: [], postDate: new Date('2012-01-01')});

// inserção de array de dados
myData = [
    {title: 'Second post', content: 'this is my second post', tags: ['tech', 'news'], postDate: new Date('2015-05-12')},
    {title: 'F1 Champioship', content: '22 races in the next year season', tags: ['tech', 'news'], postDate: new Date('2015-05-12')},
    {title: 'Germany 7x1 Brazil', content: 'What a game, my friends!', tags: ['tech', 'news'], postDate: new Date('2015-05-12')}
]
db.posts.insert(myData);

// bulk insert
var bulk = db.posts.initializeUnorderedBulkOp();
bulk.insert({title: 'The best movies of 2017', content: '1. It, 2. Saw, ...', tags: ['movies', 'cinema'], postDate: new Date('2017-11-11')});
bulk.insert({title: 'F1 Legends', content: '1. Schumacher, 2. Fangio, 3. Senna, ...', tags: ['f1', 'race'], postDate: new Date('2019-01-12')});
bulk.execute();


========= busca de posts =========
db.posts.find(); // retorna todos os documentos

db.posts.find({ title: /^W/ }); // busca usando regex

db.posts.find({}, { content: 1 }); // retorna apenas valores para um dos campos do documento (no caso, o campo "content")

db.posts.find().limit(5); // limita o retorno da busca a no máximo 5 documentos

db.posts.find().sort({ postDate: -1, title: 1 }); // ordena os resultados com base nos campos fornecidos

db.posts.find({}, {title: true}); // traz apenas os títulos dos documentos retornados na busa

db.posts.find({}, {title: true, _id: false}); // para impedir que o `_id` devemos explicitamente declará-lo como falso

db.posts.findOne({title: 'Post 1'}); // retorna um único documento de acordo com o critério de busca utilizado

db.posts.findOne({title: 'Welcome'}, {content: true}); // retorna apenas o valor de `content` para o documento retornado

db.posts.find({title: { $in: ['Post 1', 'Post 2'] }}); // retorna documentos cujos título está presente no array com o operador $in

db.posts.find({postDate: { $lt: new Date('2011-01-01') }}); // retorna documentos com data de postagem anterior a 01/01/2011

db.posts.find({ $or: [{postDate: { $lt: new Date('2011-01-01') }}, {postDate: { $gt: new Date('2016-01-01') }}] }); // uso do operador $or para consultas (traz documentos anteriores a 01/01/2011 e posteriores a 01/01/2016)

db.posts.find({ title: /^F/, $or: [ {'tags.0': 'f1'}, {'tags.0': 'race'} ]}); // uso de and e $or (traz registros cujo título começa com 'F' e que o primeiro item das tags é 'f1' ou 'race')

db.posts.find({}).skip(10).limit(10); // pula os primeiros 10 documentos e retorna no máximo os 10 próximos (bom para fazer paginação).

========= agregação e distinct =========
db.posts.aggregate([{ $group: { _id: '$title', total: { $sum: 1 } } }]); // agrega os posts com o mesmo título e realiza a contagem dos grupos


========= criação de índices =========
db.posts.createIndex({ title: 1 }); // cria um índice ascendente no campo `title`

db.posts.createIndex({ title: 1, postDate: -1 }); // cria um índice composto com `title` em ordem ascendente e `postDate` em ordem descendente

db.<collection>.createIndex({ <nome.de.atributo.documento.aninhado>: 1 }); // cria um índice para um atributo de um documento aninhado

db.posts.dropIndex({ title: 1 }); // remove um índice criado


========= atualização de documentos =========
db.posts.update({title: 'Second Post'}, { $set: {title: 'Coming back'}})

db.posts.update({tags: { $size: 0 }}, {$set: {tags: ['default']}}, {multi: true}); // atualiza todos os documentos cujo tamanho do array de tags é igual a 0. O operador `$multi` serve para indicar que mais de um registro pode ser atualizado com esse comando.

db.posts.update({tags: 'default' }, {$set: {tags: ['single']}}, {multi: true}); // atualiza todos os documentos em que o array `tags` contém a palavra `default`

db.posts.update({title: 'Post 2'}, {title: 'Post II', content: 'I\'m trying to write something', tags: [], postDate: new Date('2019-11-01')}); // substitui o objeto inteiro (exceto o _id)

db.posts.update({title: 'dogs'}, {title: 'Dogs - GIFs', content: 'The funniest GIFs of dogs ever', tags: ['funny', 'dogs', 'animals'], postDate: new Date('2016-08-31')}, {upsert: true}); // utilizamos a flag `{ upsert: true }` para adicionar um novo registro caso não haja um documento que atenda ao critério de busca (title = dogs)


========= exclusão de documentos =========
db.posts.remove({title: 'Second post'}); // remove todos os registros que atendam ao predicado

db.posts.remove({title: 'Second post'}, 1); // limita o número de documentos a serem excluídos a 1

db.posts.remove({}); // remove todos os documentos da collection

db.posts.drop(); // remove todos os documentos e a própria collection


========= backup =========
mongodump --db blog_db --out ./dump // realiza o backup do banco de dados para o arquivo dumpfile.json

mongodump --collection posts --db blog_db --out ./dump-posts // realiza o backup apenas dos documentos da collections `posts`

mongoexport --db blog_db --collection posts --out posts.json // exporta os documentos da collection 'posts' para um arquivo JSON

[mongodump | mongoexport] -u admin -p 123456 --authenticationDatabase admin --db blog_db --out ./dumpfile // realiza o dump junto com a autenticação


========= restore =========
mongorestore /home/dump/dump_folder // realiza a restauração do banco de dados a partir do diretório do dump

mongorestore --drop /home/dump/dump_folder // caso exista um banco com mesmo nome, ele será excluído (--drop) e depois restaurado a partir do dump criado

mongoimport --db blog_db posts.json // realiza a importação da collection a partir de um arquivo json

mongoimport --db bancodedados -c nomecollection --type csv --file nomedoarquivo.csv --headerline // o `type` serve para indicar o tipo do arquivo e o `headerline` para que o título das colunas sejam convertidos nas propriedades do documento
